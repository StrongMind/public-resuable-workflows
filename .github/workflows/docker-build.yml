name: Build docker and Upload to ECR

on:
  workflow_call:
    inputs:
      test_docker_run_extra_params:
        description: List of extra params to pass to docker run (for things like environment variables that are required to start)
        required: false
        type: string
        default: ""
      test_docker_timeout:
        description: Number of seconds to wait for docker to start
        required: false
        type: number
        default: 15
      build_args:
        description: List of build args to pass to docker build
        required: false
        type: string
        default: ""
      bundle-no-assets:
        description: Whether to skip assets precompilation
        required: false
        type: string
        default: bundle exec rails db:prepare db:migrate assets:precompile
      ruby-version:
        description: Rails environment to run the tests in
        required: false
        type: string
        default: "3.2.2"

env:
  AWS_REGION: us-west-2

permissions:
  contents: read

jobs:
  test-docker:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: app
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.STRONGMIND_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STRONGMIND_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: no
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create private repo
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ github.event.repository.name }}

      - name: Check for gemfile change
        #if: steps.checkout.outputs.changed_files == '**Gemfile.lock'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Gemfile.lock changed"
          docker buildx build --push \
            --build-arg BUNDLE_GEMS__CONTRIBSYS__COM=${{ env.BUNDLE_GEMS__CONTRIBSYS__COM }} \
            --cache-from=type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:CACHE \
            --cache-to mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:CACHE \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:CACHE \
            --provenance=false \
            .
          
      - name: Test docker and upload to ECR
        env:
          BUNDLE_GEMS__CONTRIBSYS__COM: ${{ secrets.BUNDLE_GEMS__CONTRIBSYS__COM }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build \
            --build-arg BUNDLE_GEMS__CONTRIBSYS__COM=${{ env.BUNDLE_GEMS__CONTRIBSYS__COM }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --cache-from=type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:CACHE \
            --load \
            .
          CONTAINER_ID=$(docker run ${{ inputs.test_docker_run_extra_params }} -d "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG")
          sleep ${{ inputs.test_docker_timeout }}
          OUTPUT=$(docker logs $CONTAINER_ID)

          if [[ $OUTPUT != *"Listening on http://0.0.0.0:3000"* ]]; then
            echo "Dockerfile test failed"
            echo $OUTPUT
            exit 1
          fi

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  rspec-test:
    name: Rspec test to code coverage
    uses: Strongmind/public-reusable-workflows/.github/workflows/rspec-test.yml@main
    with:
      bundle-no-assets: ${{ inputs.bundle-no-assets }}
      ruby-version: ${{ inputs.ruby-version }}
    secrets: inherit
